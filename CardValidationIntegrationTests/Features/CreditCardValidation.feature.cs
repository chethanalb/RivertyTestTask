// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CardValidationIntegrationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CreditCardValidation")]
    public partial class CreditCardValidationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CreditCardValidation.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CreditCardValidation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All fields are provided correctly,")]
        [NUnit.Framework.TestCaseAttribute("Valid Visa card", "Jane Doe", "4111111111111111", "1225", "381", "200", "ValidVisa", null)]
        [NUnit.Framework.TestCaseAttribute("Valid Master Card", "John Doe", "5555555555554444", "12/25", "352", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Valid Amex Card", "Jeny Doe", "378282246310005", "12/25", "188", "200", "ValidAmex", null)]
        public virtual void AllFieldsAreProvidedCorrectly(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All fields are provided correctly,", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("card owner does not have credit card information")]
        [NUnit.Framework.TestCaseAttribute("All null values", "", "", "", "", "400", "Null", null)]
        [NUnit.Framework.TestCaseAttribute("null owner", "", "5555555555554444", "11/28", "892", "400", "NullOwner", null)]
        [NUnit.Framework.TestCaseAttribute("null number", "John Doe", "", "05/23", "822", "400", "NullNumber", null)]
        [NUnit.Framework.TestCaseAttribute("null expire date", "Jeny Doe", "5555345555554444", "", "789", "400", "NullDate", null)]
        [NUnit.Framework.TestCaseAttribute("null cvv", "Jane Doe", "5555345598254415", "12/25", "", "400", "NullCvv", null)]
        public virtual void CardOwnerDoesNotHaveCreditCardInformation(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("card owner does not have credit card information", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.Then(string.Format("the server should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("verify invalid response codes,")]
        [NUnit.Framework.TestCaseAttribute("Invalid content type", "Post", "application/text", "/CardValidation/card/credit/validate", "Jane Doe", "4111111111111111", "1225", "381", "415", null)]
        [NUnit.Framework.TestCaseAttribute("invalid endpoint", "Post", "application/json", "/CardValidation/card/credit/create", "John Doe", "5555555555554444", "12/25", "352", "404", null)]
        [NUnit.Framework.TestCaseAttribute("invalid HTTP method", "Get", "application/json", "/CardValidation/card/credit/validate", "Jeny Doe", "378282246310005", "12/25", "188", "405", null)]
        public virtual void VerifyInvalidResponseCodes(string testScenario, string requestType, string contentType, string endPoint, string owner, string number, string issueDate, string cVV, string statusCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("RequestType", requestType);
            argumentsOfScenario.Add("ContentType", contentType);
            argumentsOfScenario.Add("EndPoint", endPoint);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("verify invalid response codes,", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.Given(string.Format("I create card data for new endpoint {0},{1},{2},{3},{4},{5}", requestType, endPoint, owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.When(string.Format("I send the request to server with header {0}", contentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.Then(string.Format("the server should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("card owner enter invalid details")]
        [NUnit.Framework.TestCaseAttribute("All invalid values", "9827", "162", "abcd", "20/60", "400", "Invalid", null)]
        [NUnit.Framework.TestCaseAttribute("invalid Owner", "", "5555555555554444", "11/28", "892", "400", "NullOwner", null)]
        [NUnit.Framework.TestCaseAttribute("invalid number", "John Doe", "abc2", "05/23", "822", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("invalid expire date", "Jeny Doe", "5555345555554444", "33ab", "789", "400", "WrongDate", null)]
        [NUnit.Framework.TestCaseAttribute("invalid cvv", "Jane Doe", "5555345598254415", "12/25", "abcd", "400", "WrongCvv", null)]
        public virtual void CardOwnerEnterInvalidDetails(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("card owner enter invalid details", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify cvv number length")]
        [NUnit.Framework.TestCaseAttribute("length=0", "John Doe", "5555555555554444", "12/24", "", "400", "NullCvv", null)]
        [NUnit.Framework.TestCaseAttribute("0 < length < 3", "Jim Doe", "5555555555554444", "11/28", "2", "400", "WrongCvv", null)]
        [NUnit.Framework.TestCaseAttribute("length = 3", "Jill Doe", "5555555555554444", "05/23", "822", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("length = 4", "Jeny Doe", "5555345555554444", "11/24", "7891", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("length > 4", "Jane Doe", "5555345598254415", "12/25", "242344", "400", "WrongCvv", null)]
        public virtual void VerifyCvvNumberLength(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify cvv number length", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify CVV charactor format")]
        [NUnit.Framework.TestCaseAttribute("Three numbers", "Jill Doe", "5555345555554444", "06/28", "123", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Four numbers", "John Doe", "5555345555554444", "05/27", "8789", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("One number followed by two special chars", "Jane Doe", "5555345598254415", "12/25", "2**", "400", "WrongCvv", null)]
        [NUnit.Framework.TestCaseAttribute("One number followed by three special chars", "Jeny Doe", "5555345555554444", "09/28", "2***", "400", "WrongCvv", null)]
        [NUnit.Framework.TestCaseAttribute("All special chars", "Jane Doe", "5555345598254415", "12/25", "****", "400", "WrongCvv", null)]
        [NUnit.Framework.TestCaseAttribute("letters", "Jane Doe", "5555345598254415", "12/25", "abc", "400", "WrongCvv", null)]
        [NUnit.Framework.TestCaseAttribute("decimal", "Jane Doe", "5555345598254415", "12/25", "22.2", "400", "WrongCvv", null)]
        public virtual void VerifyCVVCharactorFormat(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify CVV charactor format", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify visa card number length")]
        [NUnit.Framework.TestCaseAttribute("length = 0", "John Doe", "", "09/24", "2060", "400", "NullNumber", null)]
        [NUnit.Framework.TestCaseAttribute("0 < length number <13", "John Doe", "411111111", "05/23", "822", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("length = 13", "Jeny Doe", "4111111111111", "06/29", "789", "200", "ValidVisa", null)]
        [NUnit.Framework.TestCaseAttribute("13 < length number <16", "Jane Doe", "41111111111111", "12/25", "345", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("length = 16", "Jane Doe", "4111111111111111", "12/25", "1222", "200", "ValidVisa", null)]
        [NUnit.Framework.TestCaseAttribute("length > 16", "Jane Doe", "41111111111111111", "12/25", "5312", "400", "WrongNumber", null)]
        public virtual void VerifyVisaCardNumberLength(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify visa card number length", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify visa card number format")]
        [NUnit.Framework.TestCaseAttribute("Start with 4 and length = 13 numbers", "Jeny Doe", "4111111111111", "09/23", "4556", "200", "ValidVisa", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 4 and length = 16 numbers", "John Doe", "4111111111111111", "05/23", "822", "200", "ValidVisa", null)]
        [NUnit.Framework.TestCaseAttribute("Start with !4 and length = 13 numbers", "Jeny Doe", "3111111111111", "02/28", "789", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with !4 or !5 and length = 16 numbers", "Jane Doe", "611111111111111", "12/25", "3332", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 4 and followed by 12 special chars", "Jane Doe", "4************", "12/25", "334", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 4 and followed by 15 special chars", "Jane Doe", "4***************", "12/25", "542", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("All special chars and length = 13", "Jane Doe", "*************", "12/25", "1234", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("All special chars and length = 16", "Jane Doe", "****************", "12/25", "564", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("letters", "Jane Doe", "abcdefghijklmn", "12/25", "222", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("decimal", "Jane Doe", "41111111.11111111", "12/25", "222", "400", "WrongNumber", null)]
        public virtual void VerifyVisaCardNumberFormat(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify visa card number format", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 96
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Master card number length with correct format")]
        [NUnit.Framework.TestCaseAttribute("length = 0", "John Doe", "162", "09/30", "1120", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("0 < length <16", "John Doe", "5555555555554444", "11/28", "892", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("length = 16", "John Doe", "", "05/23", "822", "400", "NullNumber", null)]
        [NUnit.Framework.TestCaseAttribute("length > 16", "Jeny Doe", "55553455555544441243", "09/28", "789", "400", "WrongNumber", null)]
        public virtual void VerifyMasterCardNumberLengthWithCorrectFormat(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Master card number length with correct format", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 114
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 115
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Master card number format")]
        [NUnit.Framework.TestCaseAttribute("Start with 51 and length = 16 numbers", "Jill Doe", "5177777777777777", "09/28", "5433", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 55 and length = 16 numbers", "Jill Doe", "5553455982544152", "09/28", "5433", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 56 and length = 16 numbers", "Jill Doe", "5653455982544152", "09/28", "5433", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 50 and length = 16 numbers", "Jill Doe", "5053455982544152", "09/28", "5433", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 2221 and length = 16 numbers", "Jill Doe", "2221455982544152", "09/28", "5433", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 2229 and length = 16 numbers", "Jill Doe", "2229455982544152", "09/28", "5433", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 2220 and length = 16 numbers", "Jill Doe", "2220455982544152", "09/28", "5433", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 223 and length = 16 numbers", "Jill Doe", "2233455982544152", "09/28", "5433", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 229 and length = 16 numbers", "Jill Doe", "2293455982544152", "09/28", "5433", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 220 and length = 16 numbers", "Jill Doe", "2203455982544152", "09/28", "5433", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 23 and length = 16 numbers", "Jill Doe", "2353455982544152", "09/28", "5433", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 26 and length = 16 numbers", "Jill Doe", "2653455982544152", "09/28", "5433", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 21 and length = 16 numbers", "Jill Doe", "2153455982544152", "09/28", "5433", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 2701 and length = 16 numbers", "Jill Doe", "2701455982544152", "09/28", "5433", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 2720 and length = 16 numbers", "Jill Doe", "2720455982544152", "09/28", "5433", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 5 and followed by 15 special chars", "Jane Doe", "5***************", "12/25", "4221", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("All special chars and length = 16", "Jane Doe", "****************", "12/25", "222", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("letters", "Jane Doe", "abcdefghijklmn", "12/25", "222", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("decimal", "Jane Doe", "5553455.982544152", "12/25", "222", "400", "WrongNumber", null)]
        public virtual void VerifyMasterCardNumberFormat(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Master card number format", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 126
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 127
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Amex card number length with correct format")]
        [NUnit.Framework.TestCaseAttribute("length = 0", "Jane Doe", "", "0227", "2060", "400", "NullNumber", null)]
        [NUnit.Framework.TestCaseAttribute("0 < length <15", "John Doe", "378", "05/23", "822", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("length = 15", "Jeny Doe", "378282246310005", "08/26", "789", "200", "ValidAmex", null)]
        [NUnit.Framework.TestCaseAttribute("length > 15", "Jane Doe", "3782822463100058709", "12/25", "877", "400", "WrongNumber", null)]
        public virtual void VerifyAmexCardNumberLengthWithCorrectFormat(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Amex card number length with correct format", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 154
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 155
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Amex card number format")]
        [NUnit.Framework.TestCaseAttribute("Start with 34 and length = 15 numbers", "Jane Doe", "347889293047162", "0927", "2060", "200", "ValidAmex", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 37 and length = 15 numbers", "John Doe", "377889293047162", "05/23", "822", "200", "ValidAmex", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 3 but not followed by 4 or 7 and length = 13 numbers", "Jane Doe", "389999021233849", "12/25", "5434", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 34 but followed by special chars and length = 15", "Jeny Doe", "34*************", "08/28", "789", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 37 but followed by special chars and length = 15", "Jane Doe", "37*************", "12/25", "233", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Start with 347 but followed by special chars and length = 15", "Jane Doe", "347************", "12/25", "5466", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("All special chars and length = 15", "Jane Doe", "***************", "12/25", "6554", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Letters", "Jane Doe", "abcdefghijklmno", "12/25", "321", "400", "WrongNumber", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "Jane Doe", "55553455.9825441", "12/25", "222", "400", "WrongNumber", null)]
        public virtual void VerifyAmexCardNumberFormat(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Amex card number format", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 166
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Card expire date")]
        [NUnit.Framework.TestCaseAttribute("Two number month with two number year", "John Doe", "5555345555554444", "1230", "2060", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Two number month with four number year", "John Doe", "347889293047162", "102030", "822", "200", "ValidAmex", null)]
        [NUnit.Framework.TestCaseAttribute("One number month with two number year", "Jane Doe", "5555345598254415", "129", "343", "400", "WrongDate", null)]
        [NUnit.Framework.TestCaseAttribute("One number month with four number year", "Jeny Doe", "5555345555554444", "1/2027", "789", "400", "WrongDate", null)]
        [NUnit.Framework.TestCaseAttribute("Month and year in wrong order", "Jane Doe", "5555345598254415", "2030/02", "123", "400", "WrongDate", null)]
        [NUnit.Framework.TestCaseAttribute("correct date with backward Slash", "Jane Doe", "5555345598254415", "12/25", "1253", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("expired card", "Jane Doe", "5555345598254415", "12/20", "544", "400", "WrongDate", null)]
        [NUnit.Framework.TestCaseAttribute("Letters", "Jane Doe", "5555345598254415", "absd", "321", "400", "WrongDate", null)]
        [NUnit.Framework.TestCaseAttribute("Decimal", "Jane Doe", "5555345598254415", "12.25", "222", "400", "WrongDate", null)]
        public virtual void VerifyCardExpireDate(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Card expire date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 182
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 183
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 184
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 185
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Card owner name format")]
        [NUnit.Framework.TestCaseAttribute("Owner with no name", "", "5555345555554444", "12/24", "5443", "400", "NullOwner", null)]
        [NUnit.Framework.TestCaseAttribute("Owner with first name", "John", "347889293047162", "05/23", "822", "200", "ValidAmex", null)]
        [NUnit.Framework.TestCaseAttribute("Owner with first and middle name", "Jane Doe", "5555345598254415", "12/25", "342", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Owner with three names", "Jeny Doe Doe", "5555345555554444", "11/26", "789", "200", "ValidMaster", null)]
        [NUnit.Framework.TestCaseAttribute("Owner with names > 3", "Jane Doe Doe Doo", "5555345598254415", "12/25", "5432", "400", "WrongOwner", null)]
        [NUnit.Framework.TestCaseAttribute("Owner name with special charactor", "Ja*e", "5555345598254415", "12/25", "5432", "400", "WrongOwner", null)]
        [NUnit.Framework.TestCaseAttribute("numbers", "123 421", "5555345598254415", "05/23", "321", "400", "WrongOwner", null)]
        public virtual void VerifyCardOwnerNameFormat(string testScenario, string owner, string number, string issueDate, string cVV, string statusCode, string response, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test scenario", testScenario);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("CVV", cVV);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Card owner name format", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 201
 testRunner.Given(string.Format("I create a new card data {0},{1},{2},{3}", owner, number, issueDate, cVV), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 202
 testRunner.When("I send the request to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 203
 testRunner.Then(string.Format("the server should return {0},{1}", statusCode, response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
